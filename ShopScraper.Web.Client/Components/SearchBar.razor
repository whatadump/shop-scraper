@using Size = MudBlazor.Size

@inject ISnackbar Snackbar

<div Class="d-flex flex-row search @Class" >
    <MudIcon Size="Size.Medium"  Class="search-icon" Icon="@Icons.Material.Filled.Search"/>
    <input placeholder="Введите запрос" type="text" @bind-value="_searchString"/>
</div>
<div class="mt-3 search-bar d-flex justify-content-end">
    <MudButton OnClick="@OnClick" StartIcon="@Icons.Material.Filled.Search" Variant="Variant.Outlined" Size="Size.Large">Найти</MudButton>
</div>
<style>
    .search{
        border: 1px solid #555;
        border-radius: 10px;
        width: 100%;
        max-width: 700px;
        align-items: center;
        padding: 3px 15px 3px 15px;
    }
    .search-icon{
        margin-right: 15px;
    }
    .search:has(> input:focus){
        background: #eee;
    }
    
    .search input{
        width: 100%;
        height: 50px;
        font-size: 20px;
        background: transparent;
    }
    .search input:focus-visible{
        outline: none;
    }
    
    .search-alert, .search-bar{
        width: 100%;
        max-width: 700px;
    }
</style>

@code {
    private string _searchString { get; set; }
    
    [Parameter]
    public Func<string, Task>? OnSearch { get; set; }
    
    [Parameter]
    public string Initial { get; set; }
    
    [Parameter]
    public string Class { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _searchString = Initial ?? "";
            StateHasChanged();
        }
    }

    private async Task OnClick()
    {
        if (string.IsNullOrEmpty(_searchString) || string.IsNullOrWhiteSpace(_searchString))
        {
            Snackbar.Add("Запрос не должен быть пустым", Severity.Error, options =>
            {

            });
            return;
        }

        if (OnSearch is not null)
        {
            await OnSearch(_searchString);
        }
    }

}